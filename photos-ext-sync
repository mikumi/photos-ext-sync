#!/usr/bin/env node

const fs = require("fs");
const os = require("os");
const path = require("path");
const readline = require("readline");

/** Colors **/
// From: https://stackoverflow.com/a/41407246/968099
const Reset = "\x1b[0m";
const Bright = "\x1b[1m";
const Dim = "\x1b[2m";
const Underscore = "\x1b[4m";
const Blink = "\x1b[5m";
const Reverse = "\x1b[7m";
const Hidden = "\x1b[8m";

const FgBlack = "\x1b[30m";
const FgRed = "\x1b[31m";
const FgGreen = "\x1b[32m";
const FgYellow = "\x1b[33m";
const FgBlue = "\x1b[34m";
const FgMagenta = "\x1b[35m";
const FgCyan = "\x1b[36m";
const FgWhite = "\x1b[37m";

const BgBlack = "\x1b[40m";
const BgRed = "\x1b[41m";
const BgGreen = "\x1b[42m";
const BgYellow = "\x1b[43m";
const BgBlue = "\x1b[44m";
const BgMagenta = "\x1b[45m";
const BgCyan = "\x1b[46m";
const BgWhite = "\x1b[47m";

// Main

if (process.argv.length < 3) {
    printUsage();
    process.exit(1);
}

const photoLibraryPath = process.argv.length >= 4
    ? expandHomePath(process.argv[2])
    : findLibraryPath(process.argv.length);

const lightroomFolder = process.argv.length >= 4
    ? expandHomePath(process.argv[3])
    : expandHomePath(process.argv[2]);

if (!isLibraryPathValid(photoLibraryPath)) {
    if (!photoLibraryPath) {
        console.log("Could not find a macOS Photos library in the default location.");
    } else {
        console.log(`Your Photos library looks different than expected, aborting.`);
    }
    process.exit(1);
}

const editSessionsFolder = externalEditSessionsFolder(photoLibraryPath);
const editSessions = externalEditSessions(editSessionsFolder);
const lightroomOutputFiles = filesInLightroomFolder(lightroomFolder);
const sessions = externallyMatchedSessions(editSessions, lightroomOutputFiles);

console.log("");
console.log("The following of your output jpegs have been matched to Photos ExternalEditSessions:");
sessions.forEach(session => {
    // TODO: also show the number of unrelated ExternalEditSessions
    // TODO: Indicate if any lightroom files match multiple ExternalEditSessions!
    if (!session.sessionName || !session.sessionFiles) {
        console.log(`${session.lightroomFile} -> ${FgRed}UNMATCHED${Reset}`);
    } else {
        console.log(`${session.lightroomFile} -> ${FgGreen}${session.sessionName}${Reset}`);
    }
});

console.log("");
console.log(`The photos in your ExternalEditSessions folder of your Photos library will be ${FgYellow}overwritten${Reset} with your matched output files.`);
console.log("");
ask('Are you sure you want to continue? (y/N) ').then(answer => {
    if (!answer.toUpperCase().startsWith("Y")) {
        process.exit(0);
    }
    console.log("Syncing images...");
    syncMatchedSessions(editSessionsFolder, sessions);
});

/** Functions **/

function printUsage() {
    console.log("Photos-Ext-Sync\n" +
        "\n" +
        "Sync your Lightroom photo session into the macOS photo library.\n" +
        "\n" +
        "Suggested workflow:\n" +
        "    1. Export all originals from Photos library into a folder of your choice\n" +
        "    2. Edit RAW photos in Lightroom\n" +
        "    3. When done, say 'File->Export', chose your output folder and 'jpeg', and hit 'Export'.\n" +
        "    4. Mark all originals in your Photos library and chose 'Image->Edit With'. No\n" +
        "       need to switch all photos to RAW first, as Lightroom already has those. This\n" +
        "       will create official editing sessions for all the pictures, which can then be\n" +
        "       overwritten with the jpes generated by lightroom.\n" +
        "    5. Run this script to sync your jpegs back into the Photos Library\n" +
        "\n" +
        "Usage:\n" +
        "    photos-ext-sync [photo library path] path-to-your-output-folder")
}

function findLibraryPath() {
    console.log("Searching for default Photos library...");
    const picturesPath = `${os.homedir}/Pictures`;
    let photosLibraryPath = undefined;
    const files = fs.readdirSync(picturesPath);
    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const fileExt = path.extname(file);
        if (fileExt !== ".photoslibrary") {
            continue;
        }

        const fullFilePath = `${picturesPath}/${file}`;
        console.log(`Photos library found at ${FgGreen}${fullFilePath}${Reset}`);
        if (photosLibraryPath) {
            console.log("Found more than one Photos library in default location, please specify path manually.");
            return undefined;
        }

        photosLibraryPath = fullFilePath;
    }
    return photosLibraryPath;
}

function externalEditSessionsFolder(libraryPath) {
    return `${libraryPath}/private/com.apple.Photos/ExternalEditSessions`;
}

function isLibraryPathValid(libraryPath) {
    console.log("Validating file structure of Photos library...");
    // Just checking some basic common file structures to make sure we have what we are expecting
    const databaseFolder = `${libraryPath}/database`;
    const mastersFolder = `${libraryPath}/Masters`;
    const privateFolder = `${libraryPath}/private`;

    const editSessionsFolder = externalEditSessionsFolder(libraryPath);

    const isStructureValid = fs.existsSync(databaseFolder)
        && fs.existsSync(mastersFolder)
        && fs.existsSync(privateFolder)
        && fs.existsSync(editSessionsFolder);

    return isStructureValid;
}

function externalEditSessions(editSessionsFolder) {
    console.log(`Finding images in external edit sessions folder of Photos library: ${editSessionsFolder}`);
    let sessions = [];
    const editSessions = fs.readdirSync(editSessionsFolder);
    editSessions.forEach(sessionName => {
        const sessionFolder = `${editSessionsFolder}/${sessionName}`;
        const filesInSession = fs.readdirSync(sessionFolder);
        let fullFilenames = [];
        filesInSession.forEach(fileInSession => {
            let fullFilename = `${sessionFolder}/${fileInSession}`;
            fullFilenames.push(fullFilename);
        });
        const session = {
            sessionName: sessionName,
            sessionFiles: fullFilenames,
        };
        sessions.push(session)
    });
    return sessions;
}

function filesInLightroomFolder(lightroomFolder) {
    console.log(`Finding JPEG images in your output folder ${lightroomFolder}`);
    const jpegs = [];
    const files = fs.readdirSync(lightroomFolder);
    files.forEach(file => {
        const fileExt = path.extname(file);
        if (fileExt.toUpperCase() !== ".JPG" && fileExt.toUpperCase() !== ".JPEG") {
            return;
        }
        const fullFilename = `${lightroomFolder}/${file}`;
        jpegs.push(fullFilename);
    });
    return jpegs;
}

function externallyMatchedSessions(editSessions, lightroomOutputFiles) {
    let matchedSessions = [];
    lightroomOutputFiles.forEach(lightroomFile => {
        const lightroomJpegName = filenameWithoutExtension(path.basename(lightroomFile));
        let matched = false;
        editSessions.forEach(session => {
            session.sessionFiles.forEach(sessionFile => {
                const sessionJpegName = filenameWithoutExtension(path.basename(sessionFile));
                if (sessionJpegName.toUpperCase() !== lightroomJpegName.toUpperCase()) {
                    return;
                }
                session.lightroomFile = lightroomFile;
                matchedSessions.push(session);
                matched = true;
            });
        });
        if (!matched) {
            matchedSessions.push({
                lightroomFile,
            });
        }
    });
    return matchedSessions;
}

function syncMatchedSessions(sessionFolder, sessions) {
    sessions.forEach(session => {
        if (!session.sessionName || !session.sessionFiles) {
            return;
        }

        const source = session.lightroomFile;
        const destination = `${sessionFolder}/${session.sessionName}/${path.basename(session.lightroomFile)}`;
        console.log(`${source} -> ${destination} `);
        fs.writeFileSync(destination, fs.readFileSync(source));
    });
}

function filenameWithoutExtension(filename) {
    const extension = path.extname(filename);
    return filename.slice(0, - extension.length);
}

function expandHomePath(filePath) {
    if (filePath[0] === '~') {
        return path.join(process.env.HOME, filePath.slice(1));
    }
    return filePath;
}

// From: https://gist.github.com/robbyoconnor/a5c1f514babbb3309099
function ask(question) {
    var r = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
    });
    return new Promise((resolve, error) => {
        r.question(question, answer => {
            r.close();
            resolve(answer);
        });
    })
}
